---
kind: Template
apiVersion: v1
metadata:
  name: jenkins-pipeline-no-ocp-triggers
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      build: "${NAME}"
      name: "${NAME}-pipeline"
      type: "pipeline"
    name: "${NAME}-pipeline"
  spec:
    runPolicy: "${RUN_POLICY}"
    source:
      contextDir: "${PIPELINE_CONTEXT_DIR}"
      git:
        ref: "${PIPELINE_SOURCE_REPOSITORY_REF}"
        uri: "${PIPELINE_SOURCE_REPOSITORY_URL}"
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: 'labs-testdeven'
        - name: STAGE_PROJECT
          value: 'labs-devdeven'
        jenkinsfile: |-
          def version, mvnCmd = "mvn"
          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Build App') {
                steps {
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Code Analysis') {
                steps {
                  script {
                    withSonarQubeEnv {
                      sh "${mvnCmd} sonar:sonar -DskipTests=true"
                      waitForQualityGate abortPipeline: true
                    }
                  }
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "tasks").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=tasks", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Build Image') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
                  
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "tasks").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                }
              }
              stage('Create DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector('dc', 'tasks').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("tasks:latest")
                        app.narrow("svc").expose();
                        def dc = openshift.selector("dc", "tasks")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/tasks", "--remove-all")
                      }
                    }
                  }
                }
              }
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "tasks").rollout().latest();
                      }
                    }
                  }
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }
                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:${version}")
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        if (openshift.selector('dc', 'tasks').exists()) {
                          openshift.selector('dc', 'tasks').delete()
                          openshift.selector('svc', 'tasks').delete()
                          openshift.selector('route', 'tasks').delete()
                        }
                        openshift.newApp("tasks:${version}").narrow("svc").expose()
                      }
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all objects and the resulting imagestream.
  required: true
  value: s2i-app
- name: PIPELINE_SOURCE_REPOSITORY_URL
  displayName: Git Repository URL
  description: The URL of the repository with your Jenkinsfile.
  required: true
- name: PIPELINE_FILENAME
  displayName: Filename for the Jenkinsfle
  description: Filename for the Jenkinsfle
  required: true
  value: Jenkinsfile
- name: PIPELINE_SOURCE_REPOSITORY_REF
  displayName: Git Reference
  description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default (master) branch.
  value: master
- name: PIPELINE_CONTEXT_DIR
  displayName: Git Context Directory for Jenkinsfile
  description: Set this to the directory where the Jenkinsfile is if not using the
    default root directory
- name: RUN_POLICY
  displayName: Run Policy
  description: Policy to control how the build runs
  value: Serial
  required: true